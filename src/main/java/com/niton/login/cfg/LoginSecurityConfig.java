// generated by tscfg 0.9.96 on Sat Jun 06 09:55:54 CEST 2020
// source: ./default.cfg

package com.niton.login.cfg;

public class LoginSecurityConfig {
  public final LoginSecurityConfig.Security security;
  public static class Security {
    public final Security.Login login;
    public final int perma_duration;
    public static class Login {
      public final double login_delay;
      public final int max_acc_tries;
      public final int max_accounts_per_ip;
      public final int max_ip_tries;
      public final int max_ips_per_account;
      public final int tries_bevore_waiting;
      public final int waiting_area_stop;
      public final int waiting_area_time;
      
      public Login(com.typesafe.config.Config c, java.lang.String parentPath, $TsCfgValidator $tsCfgValidator) {
        this.login_delay = c.hasPathOrNull("login-delay") ? c.getDouble("login-delay") : 1.5;
        this.max_acc_tries = c.hasPathOrNull("max-acc-tries") ? c.getInt("max-acc-tries") : 25;
        this.max_accounts_per_ip = c.hasPathOrNull("max-accounts-per-ip") ? c.getInt("max-accounts-per-ip") : 3;
        this.max_ip_tries = c.hasPathOrNull("max-ip-tries") ? c.getInt("max-ip-tries") : 30;
        this.max_ips_per_account = c.hasPathOrNull("max-ips-per-account") ? c.getInt("max-ips-per-account") : 10;
        this.tries_bevore_waiting = c.hasPathOrNull("tries-bevore-waiting") ? c.getInt("tries-bevore-waiting") : 5;
        this.waiting_area_stop = c.hasPathOrNull("waiting-area-stop") ? c.getInt("waiting-area-stop") : 5;
        this.waiting_area_time = c.hasPathOrNull("waiting-area-time") ? c.getInt("waiting-area-time") : 10;
      }
    }
    
    public Security(com.typesafe.config.Config c, java.lang.String parentPath, $TsCfgValidator $tsCfgValidator) {
      this.login = c.hasPathOrNull("login") ? new Security.Login(c.getConfig("login"), parentPath + "login.", $tsCfgValidator) : new Security.Login(com.typesafe.config.ConfigFactory.parseString("login{}"), parentPath + "login.", $tsCfgValidator);
      this.perma_duration = c.hasPathOrNull("perma-duration") ? c.getInt("perma-duration") : 168;
    }
  }
  
  public LoginSecurityConfig(com.typesafe.config.Config c) {
    final $TsCfgValidator $tsCfgValidator = new $TsCfgValidator();
    final java.lang.String parentPath = "";
    this.security = c.hasPathOrNull("security") ? new LoginSecurityConfig.Security(c.getConfig("security"), parentPath + "security.", $tsCfgValidator) : new LoginSecurityConfig.Security(com.typesafe.config.ConfigFactory.parseString("security{}"), parentPath + "security.", $tsCfgValidator);
    $tsCfgValidator.validate();
  }
  private static final class $TsCfgValidator  {
    private final java.util.List<java.lang.String> badPaths = new java.util.ArrayList<>();
    
    void addBadPath(java.lang.String path, com.typesafe.config.ConfigException e) {
      badPaths.add("'" + path + "': " + e.getClass().getName() + "(" + e.getMessage() + ")");
    }
    
    void validate() {
      if (!badPaths.isEmpty()) {
        java.lang.StringBuilder sb = new java.lang.StringBuilder("Invalid configuration:");
        for (java.lang.String path : badPaths) {
          sb.append("\n    ").append(path);
        }
        throw new com.typesafe.config.ConfigException(sb.toString()) {};
      }
    }
  }
}
      
